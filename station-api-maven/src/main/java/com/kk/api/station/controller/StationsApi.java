/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.kk.api.station.controller;

import java.util.List;
import java.util.UUID;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.kk.api.station.model.Station;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-02T02:13:32.583+05:30")

@Api(value = "stations", description = "the stations API")
public interface StationsApi {

    @ApiOperation(value = "Add a new Station", nickname = "addStation", notes = "", tags={ "Station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Station Created"),
        @ApiResponse(code = 400, message = "Invalid Station object"),
        @ApiResponse(code = 409, message = "Already Station exists"),
        @ApiResponse(code = 500, message = "Internal Server error") })
    @RequestMapping(value = "/stations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addStation(@ApiParam(value = "Station object that needs to be added" ,required=true )  @Valid @RequestBody Station station);


    @ApiOperation(value = "Deletes a Station", nickname = "deleteStation", notes = "", tags={ "Station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Station deleted"),
        @ApiResponse(code = 404, message = "Station not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/stations/{stationId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStation(@ApiParam(value = "ID of station that needs to be deleted",required=true) @PathVariable("stationId") UUID stationId,@ApiParam(value = "Station object to be deleted" ,required=true )  @Valid @RequestBody Station station);


    @ApiOperation(value = "Find HD enabled Stations", nickname = "findHdStations", notes = "", response = Station.class, responseContainer = "List", tags={ "Station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful listed HD enabled stations", response = Station.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/stations/findHdEnabled",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Station>> findHdStations();


    @ApiOperation(value = "Find Station by ID", nickname = "findStationById", notes = "", response = Station.class, tags={ "Station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucessfully Station object", response = Station.class),
        @ApiResponse(code = 404, message = "Station not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/stations/{stationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Station> findStationById(@ApiParam(value = "ID of the station that needs to be fetched",required=true) @PathVariable("stationId") UUID stationId);


    @ApiOperation(value = "Find Station by Name", nickname = "findStationByName", notes = "", response = Station.class, tags={ "Station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucessfully fetched Station object", response = Station.class),
        @ApiResponse(code = 404, message = "Station not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/stations/findByName",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Station> findStationByName(@NotNull @ApiParam(value = "Name of the station that needs to be considered for filter", required = true) @Valid @RequestParam(value = "name", required = true) String name);


    @ApiOperation(value = "List of Station", nickname = "listStation", notes = "", response = Station.class, responseContainer = "List", tags={ "Station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful listed stations matching the search criteria", response = Station.class, responseContainer = "List") })
    @RequestMapping(value = "/stations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Station>> listStation();


    @ApiOperation(value = "Updates a Station", nickname = "updateStation", notes = "", response = Station.class, tags={ "Station", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Sucessfully Updated Station object", response = Station.class),
        @ApiResponse(code = 400, message = "Invalid Station object"),
        @ApiResponse(code = 404, message = "Station not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/stations/{stationId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Station> updateStation(@ApiParam(value = "ID of the station that needs to be updated",required=true) @PathVariable("stationId") UUID stationId,@ApiParam(value = "Station object to be Updated" ,required=true )  @Valid @RequestBody Station station);

}
